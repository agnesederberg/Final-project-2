import logging
from unittest.mock import patch

from flask import url_for

from .utils import TestCase


class TestUpdate(TestCase):
    """
    This class must implement the test cases related to the update use case.
    Implement as many methods as needed to cover 100% of the code.
    """

    def test_render(self) -> None:
        """
        This test tests the rendering of the page, and the creation of the route.
        A code snippet is provided below.
        """
        # get one object from the database
        # you can adjust the filtering to get the object you want
        # remember to add the imports
        # statement: Select = select(<your table here>).limit(1)
        # one: Type = db.session.execute(statement).scalars().one()

        # now you make a request to get the update page of the object
        # response = self.client.get(url_for("bp.<function name>", <obj id>=<one.id>))
        # self.assert200(response)
        # self.assertTemplateUsed("<template name>.html")
        # self.assert_html(response)

    def test_incorrectly_filled_form(self) -> None:
        """
        This function tests that the form is working correctly when provided with
        invalid data.
        """
        # get one object from the database
        # you can adjust the filtering to get the object you want
        # remember to add the imports
        # statement: Select = select(<your table here>).limit(1)
        # one: Type = db.session.execute(statement).scalars().one()

        # response = self.client.post(
        #     url_for("bp.<function name>", <obj id>=<one.id>),
        #     data={<data here in the form of a dictionary>},
        #     follow_redirects=True,
        # )
        # self.assert200(response)
        # self.assertTemplateUsed("<template name>.html")
        # self.assertIn("<expected error message>", response.data.decode())
        # self.assert_html(response)

    def test_correctly_filled_form(self) -> None:
        """
        This function tests that the form is working correctly when provided with
        valid data.
        """
        # get one object from the database
        # you can adjust the filtering to get the object you want
        # remember to add the imports
        # statement: Select = select(<your table here>).limit(1)
        # one: Type = db.session.execute(statement).scalars().one()

        # response = self.client.post(
        #     url_for("bp.<function name>", <obj id>=<one.id>),
        #     data={<data here in the form of a dictionary>},
        #     follow_redirects=True,
        # )
        # self.assert200(response)
        # self.assertTemplateUsed("<template name>.html")
        # self.assertIn("<expected error message>", response.data.decode())
        # self.assertRedirects(response, url_for("bp.<function where the user should be redirected to>"))
        # self.assert_html(response)

    def test_form_exception(self) -> None:
        """
        This function tests that the form is capable of handling
        exceptions coming from the database.
        The exception is generated by mocking the session object.
        """
        # get one object from the database
        # you can adjust the filtering to get the object you want
        # remember to add the imports
        # statement: Select = select(<your table here>).limit(1)
        # one: Type = db.session.execute(statement).scalars().one()

        # with patch(
        #     "codeapp.routes.db.session.commit",
        #     side_effect=ValueError("Mock error"),
        #     autospec=True,
        #     spec_set=True,
        # ) as mock_commit:
        #     response = self.client.post(
        #         url_for("bp.<function name>", <obj id>=<one.id>),
        #         data={<data here in the form of a dictionary>},
        #         follow_redirects=True,
        #     )
        #     # we expect the session commit to be called once
        #     mock_commit.assert_called_once()

        #     self.assert200(response)
        #     self.assertTemplateUsed("<template name>.html")
        #     self.assertIn("<expected error message>", response.data.decode())
        #     self.assert_html(response)


if __name__ == "__main__":
    logging.fatal("This file cannot be run directly. Run `pytest` instead.")
