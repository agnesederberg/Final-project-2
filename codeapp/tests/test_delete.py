import logging

from .utils import TestCase


class TestDelete(TestCase):
    """
    This class must implement the test cases related to the delete use case.
    Implement as many methods as needed to cover 100% of the code.
    """

    def test_delete_success(self) -> None:
        """
        This function tests if the delete route is working correctly.
        """
        # first, get an object from the database
        # you can adjust the filtering to get the object you want
        # remember to add the imports
        # statement: Select = select(<your table here>).limit(1)
        # one: Type = db.session.execute(statement).scalars().one()

        # then, make the delete request
        # response = self.client.post(
        #     url_for("bp.<function name>", <obj id>=<one.id>),
        #     data={<data here in the form of a dictionary>},
        #     follow_redirects=True,
        # )
        # self.assert200(response)
        # self.assertTemplateUsed("<template name>.html")
        # self.assertIn("<expected error message>", response.data.decode())

        # the delete request usually redirects the user to some other page
        # self.assertRedirects(
        #     response,
        #     url_for("bp.<function where the user should be redirected to>")
        # )
        # self.assert_html(response)

        # first, get an object from the database
        # you can adjust the filtering to get the object you want
        # remember to add the imports
        # statement: Select = select(<your table here>).filter_by(id=one.id)
        # one: Type = db.session.execute(statement).scalars().one()
        # make sure that the object does not exist anymore
        # assert one is None, f"The object {one} was not deleted successfully!"

    def test_delete_exception(self) -> None:
        """
        This function tests if the system is behaving correctly when the database
        raises an exception.
        The exception is generated by mocking the session object.
        """
        # first, get an object from the database
        # you can adjust the filtering to get the object you want
        # remember to add the imports
        # statement: Select = select(<your table here>).limit(1)
        # one: Type = db.session.execute(statement).scalars().one()

        # now you mock the session
        # with patch(
        #     "codeapp.routes.db.session.commit",
        #     side_effect=ValueError("Mock error"),
        #     autospec=True,
        #     spec_set=True,
        # ) as mock_commit:
        #     # then, make the delete request
        #     response = self.client.post(
        #         url_for("bp.<function name>", <obj id>=<one.id>),
        #         data={<data here in the form of a dictionary>},
        #         follow_redirects=True,
        #     )
        #     self.assert200(response)
        #     self.assertTemplateUsed("<template name>.html")
        #     self.assertIn(
        #         "<expected error message>",
        #         response.data.decode()
        #     )

        #     the delete request usually redirects the user to some other page
        #     self.assertRedirects(
        #         response,
        #         url_for("bp.<function where the user should be redirected to>")
        #     )
        #     self.assert_html(response)


if __name__ == "__main__":
    logging.fatal("This file cannot be run directly. Run `pytest` instead.")
